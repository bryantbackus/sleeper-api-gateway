version: '3.8'

services:
  # Main API service
  sleeper-api:
    build: .
    container_name: sleeper-api-middleware
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_PATH=/app/data/database.sqlite
    env_file:
      - .env
    volumes:
      - api_data:/app/data
      - ./logs:/app/logs
    networks:
      - sleeper_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MCP Server service
  sleeper-mcp:
    build: ./mcp
    container_name: sleeper-mcp-server
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://sleeper-api:3000
      - HTTP_PORT=3001
      - MCP_PORT=3002
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
    networks:
      - sleeper_network
    depends_on:
      sleeper-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Isolate MCP server - errors won't affect other containers
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Nginx reverse proxy
  nginx:
    build: ./nginx
    container_name: sleeper-nginx
    restart: unless-stopped
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - ENABLE_SSL=${ENABLE_SSL:-false}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - certbot_data:/var/www/certbot
    networks:
      - sleeper_network
    depends_on:
      sleeper-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"] 
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Optional: Certbot for SSL certificates (production)
  certbot:
    image: certbot/certbot
    container_name: sleeper-certbot
    restart: "no"
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - certbot_data:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN:-localhost}
    depends_on:
      nginx:
        condition: service_healthy
    profiles:
      - production

volumes:
  api_data:
    driver: local
  certbot_data:
    driver: local

networks:
  sleeper_network:
    driver: bridge
